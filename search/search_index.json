{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6280\u672f\u79ef\u7d2f \u4e00\u70b9\u4e00\u6ef4\u8bb0\u5f55\u6211\u5b66\u5230\u7684. \u8fd9\u91cc\u6709 \u7f16\u7a0b\u8bed\u8a00 - c\u3001c++\u3001java\u3001JavaScript\u7b49\u7f16\u7a0b\u8bed\u8a00. \u7f16\u8bd1\u5668 - \u5728\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u3001\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u65b9\u9762\u7528\u8fc7\u7684\u7f16\u8bd1\u5668. \u7ecf\u9a8c\u603b\u7ed3 - \u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u5751. \u5d4c\u5165\u5f0f - \u5d4c\u5165\u5f0f\u65b9\u9762\u7684\u8d44\u6599\u548c\u603b\u7ed3. \u4e2d\u533b\u517b\u751f - \u4f24\u5bd2\u8bba\u7b49\u7b14\u8bb0.","title":"\u7b80\u4ecb"},{"location":"#_1","text":"\u4e00\u70b9\u4e00\u6ef4\u8bb0\u5f55\u6211\u5b66\u5230\u7684.","title":"\u6280\u672f\u79ef\u7d2f"},{"location":"#_2","text":"\u7f16\u7a0b\u8bed\u8a00 - c\u3001c++\u3001java\u3001JavaScript\u7b49\u7f16\u7a0b\u8bed\u8a00. \u7f16\u8bd1\u5668 - \u5728\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u3001\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u65b9\u9762\u7528\u8fc7\u7684\u7f16\u8bd1\u5668. \u7ecf\u9a8c\u603b\u7ed3 - \u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u5751. \u5d4c\u5165\u5f0f - \u5d4c\u5165\u5f0f\u65b9\u9762\u7684\u8d44\u6599\u548c\u603b\u7ed3. \u4e2d\u533b\u517b\u751f - \u4f24\u5bd2\u8bba\u7b49\u7b14\u8bb0.","title":"\u8fd9\u91cc\u6709"},{"location":"embedded/bootLoader/dma_uart/","text":"dma+uart \u4f7f\u7528dma\u53cc\u7f13\u5b58\u548c\u4e32\u53e3\u5b9e\u73b0bootLoader\u5347\u7ea7. \u7528\u5230\u7684\u8d44\u6e90 uart - \u901a\u8fc7\u4e32\u53e3\u6765\u63a5\u6536\u5347\u7ea7\u6587\u4ef6. dma - \u4f7f\u7528dma\u53cc\u7f13\u51b2\u7684\u6ee1\u4e2d\u65ad\u6765\u63a5\u6536\u6570\u636e. spi - \u4f7f\u7528SPI\u63a7\u5236\u5916\u90e8flash\u8bfb\u5199. \u5916\u90e8flash - w25q128\uff0c\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u9700\u8981\u5c06\u56fa\u4ef6\u6682\u5b58\u5230\u5916\u90e8flash. \u5185\u90e8Flash\u5206\u5e03\u56fe * stm32f103zet6\u7684flash\u662f512KB\uff0c\u53e6\u5916STM32\u7684\u5185\u90e8flash\u6247\u533a\u5927\u5c0f\u4e3a2KB Name Address Size Bootloader 0x08000000 - 0x08009FFF 40KB App size 0x0800A000 - 0x0800A003 4Bytes App crc 0x0800A004 - 0x0800A005 2Bytes Reserve 0x0800A006 - 0x0800A7FF 2042Bytes App 0x0800A800 - 0x0807FFFF 470KB \u5916\u90e8flash\u5206\u5e03\u56fe Name Address Size Font lib 0x000000 - 0x3FFFFF 4MB System parameter 0x400000 - 0x4FFFFF 1MB App size 0x500000 - 0x500003 4Bytes App & crc 0x500004 - 0x577FFF 480KB-4Bytes FATFS 0x578000 - 0xFFFFFF 10MB \u5347\u7ea7\u6307\u4ee4 Sequence Code Descriptor 1 0xAA Head 2 0x10 Command 3-6 0x000000 - 0x75800 App size 7-8 0x5A 0xA5 Tail bootloader\u6d41\u7a0b\u56fe \u4e3b\u6d41\u7a0b st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> op1=>operation: \u521d\u59cb\u5316 write_to_flash=>operation: \u5199\u5165\u5185\u90e8flash staty_at_bootloader=>operation: \u505c\u7559\u5728bootloader cond1=>condition: Flash\u4e2d APP\u6570\u636e\u6709\u6548:> cond2=>condition: APP\u6570\u636e \u6b63\u786e:> jump_to_app=>operation: \u8df3\u8f6c\u5230APP waiting_for_update=>operation: \u7b49\u5f85\u5347\u7ea7 st->op1->cond1 cond1(yes)->write_to_flash->cond2 cond1(no)->staty_at_bootloader->waiting_for_update(down) cond2(yes)->jump_to_app->e cond2(no)->staty_at_bootloader->waiting_for_update(down) \u5347\u7ea7\u6d41\u7a0b st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> initial_uart=>operation: \u521d\u59cb\u5316\u4e32\u53e3 initial_dma=>operation: \u521d\u59cb\u5316DMA receive_firmware_data=>operation: \u63a5\u6536\u5347\u7ea7\u6570\u636e write_to_flash=>operation: \u5199\u5165\u5185\u90e8flash cond1=>condition: \u6536\u5230 \u5347\u7ea7\u6307\u4ee4:> cond2=>condition: APP\u6570\u636e \u6709\u6548:> cond3=>condition: APP\u6570\u636e \u6b63\u786e:> jump_to_app=>operation: \u8df3\u8f6c\u5230APP waiting_for_update=>operation: \u7b49\u5f85\u5347\u7ea7 st->initial_uart->initial_dma->cond1 cond1(yes)->receive_firmware_data->cond2 cond1(no)->cond1 cond2(yes)->write_to_flash->cond3 cond2(no)->cond1 cond3(yes)->jump_to_app->e cond3(no)->cond1 \u63a5\u6536\u5347\u7ea7\u6570\u636e\u6d41\u7a0b \u6d41\u7a0b\u56fe st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> write_to_extflash=>operation: \u5199\u5165\u5916\u90e8flash set_current_length_max_length=>operation: \u8bbe\u7f6e\u5f53\u524d\u7f13\u5b58\u957f\u5ea6\u4e3a\u6700\u5927\u7f13\u5b58\u957f\u5ea6 set_current_length_actual_length=>operation: \u8bbe\u7f6e\u5f53\u524d\u7f13\u5b58\u957f\u5ea6\u4e3a\u5b9e\u9645\u63a5\u6536\u957f\u5ea6 dma_full_interrupt=>condition: DMA\u6ee1\u4e2d\u65ad exchange_buffer=>operation: \u5207\u6362\u7f13\u51b2\u533a\u5730\u5740 get_last_buffer=>operation: \u83b7\u53d6\u4e0a\u4e00\u6b21\u7f13\u5b58\u6570\u636e less_bytes_large_than_receive=>condition: \u5269\u4f59\u957f\u5ea6>= \u6700\u5927\u7f13\u5b58\u5b57\u8282 st->dma_full_interrupt dma_full_interrupt(yes)->less_bytes_large_than_receive dma_full_interrupt(no)->dma_full_interrupt less_bytes_large_than_receive(yes)->set_current_length_max_length->exchange_buffer->get_last_buffer->write_to_extflash->e less_bytes_large_than_receive(no)->set_current_length_actual_length->exchange_buffer->get_last_buffer->write_to_extflash->e \u4ee3\u7801 static uint8_t currentBuffer[REC_BUFF_SIZE]; static uint8_t buffer_1[REC_BUFF_SIZE]; static uint8_t buffer_2[REC_BUFF_SIZE]; extern uint32_t s_u32_app_total_size; uint32_t current_flash_address = 0; deviceaccess_uart_t uart_port1 = {UART_PORT_1,115200,8,uart_rx_handle,NULL}; deviceaccess_dma_t dma_1 = {DMA_ID_1,DMA_CH_5,DMA_TYPE_TC,(uint32_t)buffer_1,(uint32_t)buffer_2,NULL,REC_BUFF_SIZE,dma_event_handle}; static uint32_t current_dma_buffer_length = REC_BUFF_SIZE; static uint32_t last_dma_buffer_length = REC_BUFF_SIZE; uint16_t actual_receive_length = 0; actual_receive_length = current_dma_buffer_length - left_count; uint32_t i = 0; uint32_t less_bytes = (CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size) - (current_flash_address+actual_receive_length); if(less_bytes >= actual_receive_length) { current_dma_buffer_length = actual_receive_length; } else { current_dma_buffer_length = less_bytes%actual_receive_length; } g_deviceaccess_dma_control(&dma_1, CMD_GET_BUFFER,&current_dma_buffer_length); if (NULL == dma_1.current_address) { return; } memset(currentBuffer,0,last_dma_buffer_length); memcpy(currentBuffer,(void *)dma_1.current_address,last_dma_buffer_length); last_dma_buffer_length = current_dma_buffer_length; if (current_flash_address<(CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size)) { //add your code write data to flash current_flash_address = current_flash_address+actual_receive_length; } if (current_flash_address >= (CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size)) { current_dma_buffer_length = REC_BUFF_SIZE; last_dma_buffer_length = REC_BUFF_SIZE; g_deviceaccess_dma_control(&dma_1, CMD_GET_BUFFER,&current_dma_buffer_length); USART_DMACmd(USART1, USART_DMAReq_Rx, DISABLE); USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //check firmware data,if correct write the data to flash(internal) }","title":"dma+uart"},{"location":"embedded/bootLoader/dma_uart/#dmauart","text":"\u4f7f\u7528dma\u53cc\u7f13\u5b58\u548c\u4e32\u53e3\u5b9e\u73b0bootLoader\u5347\u7ea7.","title":"dma+uart"},{"location":"embedded/bootLoader/dma_uart/#_1","text":"uart - \u901a\u8fc7\u4e32\u53e3\u6765\u63a5\u6536\u5347\u7ea7\u6587\u4ef6. dma - \u4f7f\u7528dma\u53cc\u7f13\u51b2\u7684\u6ee1\u4e2d\u65ad\u6765\u63a5\u6536\u6570\u636e. spi - \u4f7f\u7528SPI\u63a7\u5236\u5916\u90e8flash\u8bfb\u5199. \u5916\u90e8flash - w25q128\uff0c\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u9700\u8981\u5c06\u56fa\u4ef6\u6682\u5b58\u5230\u5916\u90e8flash.","title":"\u7528\u5230\u7684\u8d44\u6e90"},{"location":"embedded/bootLoader/dma_uart/#flash","text":"* stm32f103zet6\u7684flash\u662f512KB\uff0c\u53e6\u5916STM32\u7684\u5185\u90e8flash\u6247\u533a\u5927\u5c0f\u4e3a2KB Name Address Size Bootloader 0x08000000 - 0x08009FFF 40KB App size 0x0800A000 - 0x0800A003 4Bytes App crc 0x0800A004 - 0x0800A005 2Bytes Reserve 0x0800A006 - 0x0800A7FF 2042Bytes App 0x0800A800 - 0x0807FFFF 470KB","title":"\u5185\u90e8Flash\u5206\u5e03\u56fe"},{"location":"embedded/bootLoader/dma_uart/#flash_1","text":"Name Address Size Font lib 0x000000 - 0x3FFFFF 4MB System parameter 0x400000 - 0x4FFFFF 1MB App size 0x500000 - 0x500003 4Bytes App & crc 0x500004 - 0x577FFF 480KB-4Bytes FATFS 0x578000 - 0xFFFFFF 10MB","title":"\u5916\u90e8flash\u5206\u5e03\u56fe"},{"location":"embedded/bootLoader/dma_uart/#_2","text":"Sequence Code Descriptor 1 0xAA Head 2 0x10 Command 3-6 0x000000 - 0x75800 App size 7-8 0x5A 0xA5 Tail","title":"\u5347\u7ea7\u6307\u4ee4"},{"location":"embedded/bootLoader/dma_uart/#bootloader","text":"","title":"bootloader\u6d41\u7a0b\u56fe"},{"location":"embedded/bootLoader/dma_uart/#_3","text":"st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> op1=>operation: \u521d\u59cb\u5316 write_to_flash=>operation: \u5199\u5165\u5185\u90e8flash staty_at_bootloader=>operation: \u505c\u7559\u5728bootloader cond1=>condition: Flash\u4e2d APP\u6570\u636e\u6709\u6548:> cond2=>condition: APP\u6570\u636e \u6b63\u786e:> jump_to_app=>operation: \u8df3\u8f6c\u5230APP waiting_for_update=>operation: \u7b49\u5f85\u5347\u7ea7 st->op1->cond1 cond1(yes)->write_to_flash->cond2 cond1(no)->staty_at_bootloader->waiting_for_update(down) cond2(yes)->jump_to_app->e cond2(no)->staty_at_bootloader->waiting_for_update(down)","title":"\u4e3b\u6d41\u7a0b"},{"location":"embedded/bootLoader/dma_uart/#_4","text":"st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> initial_uart=>operation: \u521d\u59cb\u5316\u4e32\u53e3 initial_dma=>operation: \u521d\u59cb\u5316DMA receive_firmware_data=>operation: \u63a5\u6536\u5347\u7ea7\u6570\u636e write_to_flash=>operation: \u5199\u5165\u5185\u90e8flash cond1=>condition: \u6536\u5230 \u5347\u7ea7\u6307\u4ee4:> cond2=>condition: APP\u6570\u636e \u6709\u6548:> cond3=>condition: APP\u6570\u636e \u6b63\u786e:> jump_to_app=>operation: \u8df3\u8f6c\u5230APP waiting_for_update=>operation: \u7b49\u5f85\u5347\u7ea7 st->initial_uart->initial_dma->cond1 cond1(yes)->receive_firmware_data->cond2 cond1(no)->cond1 cond2(yes)->write_to_flash->cond3 cond2(no)->cond1 cond3(yes)->jump_to_app->e cond3(no)->cond1","title":"\u5347\u7ea7\u6d41\u7a0b"},{"location":"embedded/bootLoader/dma_uart/#_5","text":"","title":"\u63a5\u6536\u5347\u7ea7\u6570\u636e\u6d41\u7a0b"},{"location":"embedded/bootLoader/dma_uart/#_6","text":"st=>start: \u5f00\u59cb:> e=>end: \u7ed3\u675f:> write_to_extflash=>operation: \u5199\u5165\u5916\u90e8flash set_current_length_max_length=>operation: \u8bbe\u7f6e\u5f53\u524d\u7f13\u5b58\u957f\u5ea6\u4e3a\u6700\u5927\u7f13\u5b58\u957f\u5ea6 set_current_length_actual_length=>operation: \u8bbe\u7f6e\u5f53\u524d\u7f13\u5b58\u957f\u5ea6\u4e3a\u5b9e\u9645\u63a5\u6536\u957f\u5ea6 dma_full_interrupt=>condition: DMA\u6ee1\u4e2d\u65ad exchange_buffer=>operation: \u5207\u6362\u7f13\u51b2\u533a\u5730\u5740 get_last_buffer=>operation: \u83b7\u53d6\u4e0a\u4e00\u6b21\u7f13\u5b58\u6570\u636e less_bytes_large_than_receive=>condition: \u5269\u4f59\u957f\u5ea6>= \u6700\u5927\u7f13\u5b58\u5b57\u8282 st->dma_full_interrupt dma_full_interrupt(yes)->less_bytes_large_than_receive dma_full_interrupt(no)->dma_full_interrupt less_bytes_large_than_receive(yes)->set_current_length_max_length->exchange_buffer->get_last_buffer->write_to_extflash->e less_bytes_large_than_receive(no)->set_current_length_actual_length->exchange_buffer->get_last_buffer->write_to_extflash->e","title":"\u6d41\u7a0b\u56fe"},{"location":"embedded/bootLoader/dma_uart/#_7","text":"static uint8_t currentBuffer[REC_BUFF_SIZE]; static uint8_t buffer_1[REC_BUFF_SIZE]; static uint8_t buffer_2[REC_BUFF_SIZE]; extern uint32_t s_u32_app_total_size; uint32_t current_flash_address = 0; deviceaccess_uart_t uart_port1 = {UART_PORT_1,115200,8,uart_rx_handle,NULL}; deviceaccess_dma_t dma_1 = {DMA_ID_1,DMA_CH_5,DMA_TYPE_TC,(uint32_t)buffer_1,(uint32_t)buffer_2,NULL,REC_BUFF_SIZE,dma_event_handle}; static uint32_t current_dma_buffer_length = REC_BUFF_SIZE; static uint32_t last_dma_buffer_length = REC_BUFF_SIZE; uint16_t actual_receive_length = 0; actual_receive_length = current_dma_buffer_length - left_count; uint32_t i = 0; uint32_t less_bytes = (CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size) - (current_flash_address+actual_receive_length); if(less_bytes >= actual_receive_length) { current_dma_buffer_length = actual_receive_length; } else { current_dma_buffer_length = less_bytes%actual_receive_length; } g_deviceaccess_dma_control(&dma_1, CMD_GET_BUFFER,&current_dma_buffer_length); if (NULL == dma_1.current_address) { return; } memset(currentBuffer,0,last_dma_buffer_length); memcpy(currentBuffer,(void *)dma_1.current_address,last_dma_buffer_length); last_dma_buffer_length = current_dma_buffer_length; if (current_flash_address<(CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size)) { //add your code write data to flash current_flash_address = current_flash_address+actual_receive_length; } if (current_flash_address >= (CONFIG_EXTFLASH_APP_ADDRESS+s_u32_app_total_size)) { current_dma_buffer_length = REC_BUFF_SIZE; last_dma_buffer_length = REC_BUFF_SIZE; g_deviceaccess_dma_control(&dma_1, CMD_GET_BUFFER,&current_dma_buffer_length); USART_DMACmd(USART1, USART_DMAReq_Rx, DISABLE); USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //check firmware data,if correct write the data to flash(internal) }","title":"\u4ee3\u7801"},{"location":"embedded/bootLoader/usb_vitual_uart/","text":"\u6280\u672f\u79ef\u7d2f \u4e00\u70b9\u4e00\u6ef4\u8bb0\u5f55\u6211\u5b66\u5230\u7684. \u8fd9\u91cc\u6709 \u7f16\u7a0b\u8bed\u8a00 - c\u3001c++\u3001java\u3001JavaScript\u7b49\u7f16\u7a0b\u8bed\u8a00. \u7f16\u8bd1\u5668 - \u5728\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u3001\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u65b9\u9762\u7528\u8fc7\u7684\u7f16\u8bd1\u5668. \u7ecf\u9a8c\u603b\u7ed3 - \u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u5751. \u5d4c\u5165\u5f0f - \u5d4c\u5165\u5f0f\u65b9\u9762\u7684\u8d44\u6599\u548c\u603b\u7ed3. \u4e2d\u533b\u517b\u751f - \u4f24\u5bd2\u8bba\u7b49\u7b14\u8bb0.","title":"usb\u865a\u62df\u4e32\u53e3"},{"location":"embedded/bootLoader/usb_vitual_uart/#_1","text":"\u4e00\u70b9\u4e00\u6ef4\u8bb0\u5f55\u6211\u5b66\u5230\u7684.","title":"\u6280\u672f\u79ef\u7d2f"},{"location":"embedded/bootLoader/usb_vitual_uart/#_2","text":"\u7f16\u7a0b\u8bed\u8a00 - c\u3001c++\u3001java\u3001JavaScript\u7b49\u7f16\u7a0b\u8bed\u8a00. \u7f16\u8bd1\u5668 - \u5728\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u3001\u4e0a\u4f4d\u673a\u8f6f\u4ef6\u65b9\u9762\u7528\u8fc7\u7684\u7f16\u8bd1\u5668. \u7ecf\u9a8c\u603b\u7ed3 - \u9047\u5230\u8fc7\u7684\u4e00\u4e9b\u5751. \u5d4c\u5165\u5f0f - \u5d4c\u5165\u5f0f\u65b9\u9762\u7684\u8d44\u6599\u548c\u603b\u7ed3. \u4e2d\u533b\u517b\u751f - \u4f24\u5bd2\u8bba\u7b49\u7b14\u8bb0.","title":"\u8fd9\u91cc\u6709"},{"location":"language/c/pointer/","text":"\u5173\u4e8e Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u6211\u7684\u7b2c\u4e00\u4e2aMKDOSC\u6587\u6863","title":"\u6307\u9488\u4f20\u9012"},{"location":"language/c/pointer/#_1","text":"","title":"\u5173\u4e8e"},{"location":"language/c/pointer/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"language/c/pointer/#mkdosc","text":"","title":"\u6211\u7684\u7b2c\u4e00\u4e2aMKDOSC\u6587\u6863"},{"location":"language/c%2B%2B/C%2B%2BPrimer/","text":"C++ C++\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u8bed\u8a00","title":"C++Primer"},{"location":"language/c%2B%2B/C%2B%2BPrimer/#c","text":"","title":"C++"},{"location":"language/c%2B%2B/C%2B%2BPrimer/#c_1","text":"","title":"C++\u662f\u4e00\u95e8\u9762\u5411\u5bf9\u8c61\u8bed\u8a00"}]}